//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ush4.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ResourcesE {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ResourcesE() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ush4.Properties.ResourcesE", typeof(ResourcesE).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на AC fail: Loss of phase..
        /// </summary>
        internal static string ACFail {
            get {
                return ResourceManager.GetString("ACFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Active movement. Not in standstill..
        /// </summary>
        internal static string ActiveMovement {
            get {
                return ResourceManager.GetString("ActiveMovement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An error occurred while polling the device status..
        /// </summary>
        internal static string An_error_occurred_while_polling_the_device_status {
            get {
                return ResourceManager.GetString("An_error_occurred_while_polling_the_device_status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        internal static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot create Personality Model from file..
        /// </summary>
        internal static string Cannot_create_Personality_Model_from_file {
            get {
                return ResourceManager.GetString("Cannot_create_Personality_Model_from_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot start upload Personality Model from drive..
        /// </summary>
        internal static string Cannot_start_upload_Personality_Model_from_drive {
            get {
                return ResourceManager.GetString("Cannot_start_upload_Personality_Model_from_drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Commutation process fail during motor on..
        /// </summary>
        internal static string CommProcessFail {
            get {
                return ResourceManager.GetString("CommProcessFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Configuration file of device does not found..
        /// </summary>
        internal static string Configuration_file_of_device_does_not_found {
            get {
                return ResourceManager.GetString("Configuration_file_of_device_does_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Connection info: {0}..
        /// </summary>
        internal static string Connection_info {
            get {
                return ResourceManager.GetString("Connection_info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Current exceeded peak limit..
        /// </summary>
        internal static string CurrenPeakLimit {
            get {
                return ResourceManager.GetString("CurrenPeakLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Current Limit is on..
        /// </summary>
        internal static string CurrentLimit {
            get {
                return ResourceManager.GetString("CurrentLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Device connected!.
        /// </summary>
        internal static string DeviceConnected {
            get {
                return ResourceManager.GetString("DeviceConnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Device disconnected!.
        /// </summary>
        internal static string DeviceDisconnected {
            get {
                return ResourceManager.GetString("DeviceDisconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Device does not found.
        /// </summary>
        internal static string DeviceDoesNotFound {
            get {
                return ResourceManager.GetString("DeviceDoesNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Device name {0}. Connection type: {1}. .
        /// </summary>
        internal static string DeviceInfo {
            get {
                return ResourceManager.GetString("DeviceInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Device is ready.
        /// </summary>
        internal static string DeviceIsReady {
            get {
                return ResourceManager.GetString("DeviceIsReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Try connect to ELMO drive.
        /// </summary>
        internal static string DeviceTryToConnect {
            get {
                return ResourceManager.GetString("DeviceTryToConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The drive is OK..
        /// </summary>
        internal static string DriveOk {
            get {
                return ResourceManager.GetString("DriveOk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error: {0}..
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ErrorCode: {0}, ErrorCodeDescription: {1}, LibraryErrorCode: {2}, LibraryErrorDescription: {3}..
        /// </summary>
        internal static string ErrorFormat {
            get {
                return ResourceManager.GetString("ErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An error occurred while writing a command to the drive..
        /// </summary>
        internal static string ErrorWhileWrite {
            get {
                return ResourceManager.GetString("ErrorWhileWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на External Inhibit was triggered (INH/ENB)..
        /// </summary>
        internal static string ExternalInhibit {
            get {
                return ResourceManager.GetString("ExternalInhibit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to start motor..
        /// </summary>
        internal static string FailedToStart {
            get {
                return ResourceManager.GetString("FailedToStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Feedback is out of position limits..
        /// </summary>
        internal static string FeedbackPositionLimit {
            get {
                return ResourceManager.GetString("FeedbackPositionLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gantry slave disabled..
        /// </summary>
        internal static string GantrySlaveDisabled {
            get {
                return ResourceManager.GetString("GantrySlaveDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gantry Yaw or Stepper closed loop Position error..
        /// </summary>
        internal static string GantryYaw {
            get {
                return ResourceManager.GetString("GantryYaw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HallMismatch.
        /// </summary>
        internal static string HallMismatch {
            get {
                return ResourceManager.GetString("HallMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Halls sensor speed is too high..
        /// </summary>
        internal static string HallSpeedTooHigh {
            get {
                return ResourceManager.GetString("HallSpeedTooHigh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Heartbeat event or frame loss(communication)..
        /// </summary>
        internal static string HeartbeatEvent {
            get {
                return ResourceManager.GetString("HeartbeatEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In Elmo&apos;s homing or capture sequence..
        /// </summary>
        internal static string HomingEvent {
            get {
                return ResourceManager.GetString("HomingEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Homing operation aborted or error occurred!.
        /// </summary>
        internal static string HomingFail {
            get {
                return ResourceManager.GetString("HomingFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Homing operation complete!.
        /// </summary>
        internal static string HomingFinished {
            get {
                return ResourceManager.GetString("HomingFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Main feedback error..
        /// </summary>
        internal static string MainFeedbackError {
            get {
                return ResourceManager.GetString("MainFeedbackError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The motor is enabled..
        /// </summary>
        internal static string MotorEnable {
            get {
                return ResourceManager.GetString("MotorEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A fault occurred while the motor was enabled..
        /// </summary>
        internal static string MotorFault {
            get {
                return ResourceManager.GetString("MotorFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The motor is not enabled..
        /// </summary>
        internal static string MotorNotEnable {
            get {
                return ResourceManager.GetString("MotorNotEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Motor is stuck..
        /// </summary>
        internal static string MotorStuck {
            get {
                return ResourceManager.GetString("MotorStuck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Numeric overflow - ambiguity in results..
        /// </summary>
        internal static string NumericOverflow {
            get {
                return ResourceManager.GetString("NumericOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overspeed indication..
        /// </summary>
        internal static string Overspeed {
            get {
                return ResourceManager.GetString("Overspeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overtemperature: The drive is sensing a temperature which exceeds the maximum allowed temperature limit..
        /// </summary>
        internal static string Overtemperature {
            get {
                return ResourceManager.GetString("Overtemperature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overvoltage: The amplifier is measuring a voltage which is higher than the maximum allowed value..
        /// </summary>
        internal static string Overvoltage {
            get {
                return ResourceManager.GetString("Overvoltage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Personality loaded from file..
        /// </summary>
        internal static string PersonalityLoadedFromFile {
            get {
                return ResourceManager.GetString("PersonalityLoadedFromFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Platform is initializing.
        /// </summary>
        internal static string PlatformInitializing {
            get {
                return ResourceManager.GetString("PlatformInitializing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Position tracking error..
        /// </summary>
        internal static string PositionTrackingError {
            get {
                return ResourceManager.GetString("PositionTrackingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Operation progress.
        /// </summary>
        internal static string Progress {
            get {
                return ResourceManager.GetString("Progress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Safety: One or two of the safety inputs are in safety state..
        /// </summary>
        internal static string Safety {
            get {
                return ResourceManager.GetString("Safety", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The servo is enabled!.
        /// </summary>
        internal static string ServoEnabled {
            get {
                return ResourceManager.GetString("ServoEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The servo is not enabled..
        /// </summary>
        internal static string ServoNotEnabled {
            get {
                return ResourceManager.GetString("ServoNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Short Protection: The current has exceeded a range which is considered as a phase to phase or phase to ground short..
        /// </summary>
        internal static string ShortProtection {
            get {
                return ResourceManager.GetString("ShortProtection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Speed tracking error..
        /// </summary>
        internal static string SpeedTrackingError {
            get {
                return ResourceManager.GetString("SpeedTrackingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Standstill. No movement..
        /// </summary>
        internal static string Standstill {
            get {
                return ResourceManager.GetString("Standstill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на STO enabled. The drive is in safety state. The motor cannot be activated..
        /// </summary>
        internal static string STI1 {
            get {
                return ResourceManager.GetString("STI1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Safety Input 2(STO_PWM). The drive is in safety state. The motor cannot be activated..
        /// </summary>
        internal static string STI2 {
            get {
                return ResourceManager.GetString("STI2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The profiler stopped due to a switch..
        /// </summary>
        internal static string StopActive {
            get {
                return ResourceManager.GetString("StopActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Target reached!.
        /// </summary>
        internal static string TargetReached {
            get {
                return ResourceManager.GetString("TargetReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to start upload personality from drive..
        /// </summary>
        internal static string Unable_to_start_upload_personality_from_drive {
            get {
                return ResourceManager.GetString("Unable_to_start_upload_personality_from_drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to connect to ELMO drive..
        /// </summary>
        internal static string UnableToConnect {
            get {
                return ResourceManager.GetString("UnableToConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to disconnect from drive..
        /// </summary>
        internal static string UnableToDisconnect {
            get {
                return ResourceManager.GetString("UnableToDisconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to load personality from file!.
        /// </summary>
        internal static string UnableToLoadFromFile {
            get {
                return ResourceManager.GetString("UnableToLoadFromFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Undervoltage: The amplifier is not measuring the minimum required voltage..
        /// </summary>
        internal static string Undervoltage {
            get {
                return ResourceManager.GetString("Undervoltage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Uploaded from drive: {0}%..
        /// </summary>
        internal static string Uploaded_from_drive {
            get {
                return ResourceManager.GetString("Uploaded_from_drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Upload finished!.
        /// </summary>
        internal static string UploadFinished {
            get {
                return ResourceManager.GetString("UploadFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Upload from drive interrapted! Reason: {0}. .
        /// </summary>
        internal static string UploadInterrapted {
            get {
                return ResourceManager.GetString("UploadInterrapted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Upload started!.
        /// </summary>
        internal static string UploadStarted {
            get {
                return ResourceManager.GetString("UploadStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User Program is running..
        /// </summary>
        internal static string UserProgram {
            get {
                return ResourceManager.GetString("UserProgram", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Wait for homing operation complete..
        /// </summary>
        internal static string WaitHoming {
            get {
                return ResourceManager.GetString("WaitHoming", resourceCulture);
            }
        }
    }
}
